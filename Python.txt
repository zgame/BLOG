除法根据前面的类型定义 

1/2 = 0 (根据1取整)

字符串也是数组

s = 'Python'
s[-1]='n'
s[1:4]='yth'
s[3:-1]='ho'
list[::-1][:3]
list[-3:][::-1]
list[::-1]是将列表反过来，一种是先反过来，然后取前三位；一种是先取后三位，再反过来。

list[-3:]是取list的从后面数3个元素


s.split()字符串按照空格分隔
' '.join(s)组成字符串, 作用是将s这个list用空格来区分每个数组中的item，最后组成一个string
s.upper()大写
s.title()大写首字母



字符串支持 +（连接字符串） 和 *（乘法，重复字符串）


list.append()
list.insert(1,'web')
list.remove(8)
list.extend(list2)


如果你不想让反斜杠发生转义，可以在字符串前面添加一个r，表示原始字符串：
>>> print('C:\some\name')
C:\some
ame
>>> print(r'C:\some\name')
C:\some\name


cls是class的缩写


set() set和list可以互相转换， set的速度比list快非常多


list(set(list1))   去掉重复的元素

----------------------------------------------------------------------
dict.get(key, default=None)
key -- 这是要搜索在字典中的键。
default -- 这是要返回键不存在的的情况下默认值。

----------------------------------------------------------------------

利用isinstance函数，来判断一个对象是否是一个已知的类型。  

----------------------------------------------------------------------
1 filter(function, sequence)：
str = ['a', 'b','c', 'd']
def fun1(s): return s if s != 'a' else None
ret = filter(fun1, str)
print ret
## ['b', 'c', 'd']
对sequence中的item依次执行function(item)，将执行结果为True的item组成一个List/String/Tuple（取决于sequence的类型）返回。
可以看作是过滤函数。 
 2 map(function, sequence) 
str = ['a', 'b','c', 'd'] 
def fun2(s): return s + ".txt"
ret = map(fun2, str)
print ret
## ['a.txt', 'b.txt', 'c.txt', 'd.txt']
对sequence中的item依次执行function(item)，见执行结果组成一个List返回：
map也支持多个sequence，这就要求function也支持相应数量的参数输入：
def add(x, y): return x+y 
 print map(add, range(10), range(10)) 
##[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
3 reduce(function, sequence, starting_value)：def add1(x,y): return x + y 
print reduce(add1, range(1, 100)) 
print reduce(add1, range(1, 100), 20)
## 4950 （注：1+2+...+99）
## 4970 （注：1+2+...+99+20）
对sequence中的item顺序迭代调用function，如果有starting_value，还可以作为初始值调用，例如可以用来对List求和： 
4 lambda：
g = lambda s: s + ".fsh" 
print g("haha") 
print (lambda x: x * 2) (3)
## haha.fsh 
## 6
这是Python支持一种有趣的语法，它允许你快速定义单行的最小函数，类似与C语言中的宏，这些叫做lambda的函数.

----------------------------------------------------------------------

print "%s ,%s, %s"%(3,4,5)


-------------------------------------------------------------------------
在编写sql语句的时候，如果日期转换用%就会报错，所以要用%%


-----------------------------------------------------------------------
数字变为字符串 str(4)
字符串变为数字 string.atoi(s,[，base]) //base为进制基数
浮点数转换 string.atof(s)
字符转数字 int(str)

---------------------------------------------------------
利用enumerate()函数，可以在每次循环中同时得到下标和元素：
for (index,char) in enumerate(S): 
	print index print char


for k,v in dict.iteritems():


random.randint
print random.randint(12,20)#生成的随机数n:12<=n<=20

-----------------------------------------------------------------------
row_day = datetime.datetime.strptime(str(row_date),'%Y-%m-%d')  #将date转换为str，在由str转换为datetime
(create_time-row_day).days



获取命令行参数
if __name__ == "__main__":
   main(sys.argv[1:])


import 自定义的目录时候，2.7版本需要在目录下创建__init__.py文件

2.7版本要注意，coding = utf-8 必须写在第一行